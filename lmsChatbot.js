import { MongoClient } from "mongodb";
import Groq from "groq-sdk";
import dotenv from "dotenv";

dotenv.config();

// MongoDB connect
const client = new MongoClient(process.env.MONGO_URI);
await client.connect();
const db = client.db("lms");

// Groq init
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

// Allowed collections (security)
const ALLOWED_COLLECTIONS = ["users", "courses", "enrollments"];

// Step 1: LLM generates Mongo query JSON
async function buildMongoQuery(question) {
    const systemPrompt = `
You are an expert MongoDB query generator.
Rules:
1. Only use these collections: ${ALLOWED_COLLECTIONS.join(", ")}.
2. Always return JSON with "collection" and "filter".
3. Do NOT include explanations or extra text.
4. Example:
Q: How many active users are there?
A: { "collection": "users", "filter": { "status": "active" } }
Q: Show all courses
A: { "collection": "courses", "filter": {} }
`;

    const completion = await groq.chat.completions.create({
        model: "llama-3.3-70b-versatile",
        messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: question },
        ],
    });

    try {
        const query = completion.choices[0].message.content;
        const parsed = JSON.parse(query);

        // âœ… Safety checks
        if (!ALLOWED_COLLECTIONS.includes(parsed.collection)) {
            throw new Error(
                `Collection "${parsed.collection}" is not allowed.`
            );
        }
        return parsed;
    } catch (err) {
        throw new Error("Invalid Mongo query generated by LLM.");
    }
}

// Step 2: Run Mongo query + summarize answer
async function ask(question) {
    try {
        // Generate Mongo query
        const { collection, filter } = await buildMongoQuery(question);

        // Run query with limit
        const result = await db
            .collection(collection)
            .find(filter)
            .limit(20)
            .toArray();

        // Send DB result + question to LLM for human-readable answer
        const answerCompletion = await groq.chat.completions.create({
            model: "llama-3.3-70b-versatile",
            messages: [
                {
                    role: "system",
                    content:
                        "Answer the question based ONLY on the DB results below.",
                },
                {
                    role: "user",
                    content: `Question: ${question}\nDB Data: ${JSON.stringify(
                        result,
                        null,
                        2
                    )}\nAnswer:`,
                },
            ],
        });

        console.log("User Question:", question);
        console.log(
            "Answer:",
            answerCompletion.choices[0].message.content,
            "\n"
        );
    } catch (err) {
        console.error("Error:", err.message);
    }
}

await ask("Kitne active users hain?");
await ask("React course me enrollments kaunse students ke hain?");
await ask("Is NodeJS Course ka price kya hai?");
await ask("Kaunse courses available hain?");
await ask("Kya user Ram ne React course kharida hai?");
